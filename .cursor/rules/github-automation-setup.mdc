---
description: 
globs: 
alwaysApply: false
---
# GitHub 자동화 설정 완료

## 📋 구현된 기능 목록

### 1. ✅ GitHub Actions 워크플로우

#### 테스트 자동화
- **파일**: `.github/workflows/test.yml`
- **트리거**: Push/PR (main, develop 브랜치)
- **기능**: 
  - Python 3.11, 3.12 매트릭스 테스트
  - Backend/Frontend 테스트 실행
  - 테스트 커버리지 생성
  - Codecov 업로드

#### PR 관리 자동화
- **파일**: `.github/workflows/pr-comment.yml`
- **기능**: PR 생성시 자동 분석 댓글 등록
- **내용**: 변경 파일 분석, 체크리스트, 리뷰 가이드

- **파일**: `.github/workflows/pr-assigner.yml`  
- **기능**: 브랜치명 기반 자동 리뷰어/담당자 할당
- **로직**: feature/bugfix/hotfix 별 다른 할당 전략

- **파일**: `.github/workflows/pr-labeler.yml`
- **기능**: 자동 라벨링 시스템
- **분석**: 브랜치명, 제목, 변경 파일, 코드 변경량 기반

- **파일**: `.github/workflows/pr-code-review.yml`
- **기능**: 자동 코드 품질 검사 및 리뷰
- **도구**: flake8, black, isort, bandit, mypy

#### 이슈 관리 자동화
- **파일**: `.github/workflows/issue-comment.yml`
- **기능**: 이슈 유형별 자동 환영 댓글
- **분석**: 제목/내용 기반 이슈 유형 판별

- **파일**: `.github/workflows/issue-assigner.yml`
- **기능**: 이슈 유형/영역별 자동 담당자 할당
- **로직**: Backend/Frontend/DevOps 영역별 전문가 할당

- **파일**: `.github/workflows/issue-labeler.yml`
- **기능**: 포괄적인 자동 라벨링 시스템
- **분석**: 유형, 우선순위, 영역, 플랫폼, 컴포넌트 라벨

### 2. ✅ 이슈/PR 템플릿

#### 이슈 템플릿
- **버그 신고**: `.github/ISSUE_TEMPLATE/bug_report.yml`
  - 구조화된 버그 정보 수집
  - 재현 단계, 환경 정보, 심각도 분류
  
- **기능 요청**: `.github/ISSUE_TEMPLATE/feature_request.yml`
  - 체계적인 기능 제안 프로세스
  - 문제 정의, 해결방안, 우선순위, 복잡도 평가

- **질문**: `.github/ISSUE_TEMPLATE/question.yml`
  - 효율적인 Q&A 프로세스
  - 관련 배경, 시도한 방법, 긴급도

#### PR 템플릿
- **파일**: `.github/PULL_REQUEST_TEMPLATE/pull_request_template.md`
- **구성**: 
  - 작업 내용 요약
  - 변경사항 상세 분석
  - 테스트 체크리스트
  - 리뷰 가이드
  - 배포 준비사항

### 3. ✅ 프로젝트 설정

#### .gitignore 
- **파일**: `.gitignore`
- **범위**: Python, IDE, OS, 프로젝트별 무시 파일

#### GitHub 워크플로우 규칙
- **파일**: `.cursor/rules/github-workflow.mdc`
- **내용**: PR/이슈 관리 규칙, 자동화 정책

## 🔧 설정 방법

### 1. 팀원 정보 업데이트
워크플로우 파일에서 실제 GitHub 사용자명으로 변경:
```yaml
# .github/workflows/pr-assigner.yml
# .github/workflows/issue-assigner.yml
teamMembers: [
  'actual-github-username1',
  'actual-github-username2'
]
```

### 2. 브랜치 전략 설정
- `main`: 프로덕션 브랜치
- `develop`: 개발 브랜치  
- `feature/*`: 기능 개발
- `bugfix/*`: 버그 수정
- `hotfix/*`: 긴급 수정

### 3. 라벨 생성 권장
GitHub 저장소에서 다음 라벨들을 미리 생성:
```
type/bug, type/enhancement, type/question
priority/critical, priority/high, priority/medium, priority/low
area/backend, area/frontend, area/testing
status/triage, status/todo, status/in-progress
size/xs, size/small, size/medium, size/large
```

## 📊 자동화 효과

### 개발 효율성
- ⚡ PR 처리 시간 단축 (자동 할당/라벨링)
- 🔍 코드 품질 자동 검증
- 📋 일관된 이슈/PR 템플릿

### 협업 개선
- 👥 자동 담당자 할당으로 책임 명확화
- 🏷️ 체계적인 라벨링으로 이슈 분류
- 💬 자동 가이드 제공으로 소통 개선

### 품질 관리
- 🧪 모든 코드 변경에 대한 자동 테스트
- 🔒 보안 검사 자동화
- 📈 테스트 커버리지 추적

## 🚀 다음 단계

1. **GitHub 저장소 설정**
   - 브랜치 보호 규칙 설정
   - 필수 리뷰어 설정
   - 상태 체크 필수화

2. **추가 자동화 고려사항**
   - 자동 배포 파이프라인
   - 성능 테스트 자동화
   - 문서 자동 생성

3. **모니터링 설정**
   - 워크플로우 실행 모니터링
   - 실패 알림 설정
   - 메트릭 수집 및 분석
